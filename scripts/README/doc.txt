---Method---------------------------------

Function form
1. 일반 함수 General Function
  funcion name() {}
*2. 익명 함수 Anonymouse Function
  function() {}
*3. 화살표 함수 Arror Function
  () => {}

for( var of Array ) { var }
== for(let i=0;i<Array.length;i++) { Array[i] }
== Array.forEach((var) => { var })
== Python's for var in List

*Iterator.forEach(CallBackFunc: (value, index, array) => void)

Math.random(): Number | 0 이상 1 미만의 난수 반환

---Class---------------------------------

Item {
  new PieceItem(
    name:String,  : 조각의 이름
    count:Number  : 조각의 갯수
  )
  new SwordItem(
    name:String,  : 검의 이름
    count:Number  : 검의 갯수
  )
  new MoneyItem(
    count:Number  : 돈의 수량
  )
}

new Sword(
  name:String,            : 검의 이름
  prob:Number,            : 다음 단계 성공 확률
  cost:Number,            : 다음 단계 강화비용
  price:Number,           : 판매시 가격
  requiredRepairs:Number, : 필요한 복구권 갯수
  canSave:Boolean,        : 보관함에 저장 가능 여부
  pieces: ...Piece        : 드랍되는 조각들
)
new Piece(
  name:String,    : 조각 이름
  prob:Number,    : 조각 생성 확률
  max_drop:Number : 최대 생성 확률
)
new Stat(
  name:String     : 스탯 이름
  current:Number  : 현재 스탯 레벨
)

---Funcion&Variable---------------------------------

Piece.calculate() : PieceItem
  생성 확률에 따라 성공시 PieceItem, 실패시 null

GameManager.init(start: Number)
  GameManager.init() | 검을 0강으로 초기화 후 메인 게임 화면을 보여줍니다.
  GameManager.init(start) | 검을 start강으로 이동 후 메인 게임 화면을 보여줍니다.
GameManager.test() : testResult
  다음 단계로 업그레이드 가능 여부를 반환합니다.
  : TestResult.SUCCESS | 업그레이드 가능
  : TestResult.MONEY_LACK | 돈 부족으로 불가능
  : TestResult.MAX_UPGRADE | 최대 강화 달성으로 불가능

RecordStroage.addRecord(sword: Sword, type: "upgrade" || "sell") 
  기록 보관함에 sword를 type한 기록을 합니다.

MoneyDisplay.setMoney(num: Number)
  가진 자산을 num으로 설정합니다.
MoneyDisplay.changeMoney(num: Number)
  가진 자산을 num만큼 변경합니다.

MainScreen.render()
  메인 게임 화면을 새로고침합니다.

StatScreen.render()
  스탯 창을 새로고침합니다.

MessageWindow.popupFallMessage(...pieces: ...Piece)
  검 파괴 알림을 떨어진 조각 정보와 함께 보여줍니다.
MessageWindow.popupMoneyLackMessage()
  돈 부족 알림을 보여줍니다.
MessageWindow.popupMaxMessage()
  최대 강화 달성을 축하하는 알림을 보여줍니다.
MessageWindow.popupInvalidationMessage()
  [ 무효화 구체 ]가 발동했음을 알리는 알림을 보여줍니다.
MessageWindow.popupGreatSuccessMessage()
  [ 신의 손 ]이 발동했음을 알리는 알림을 보여줍니다.
MessageWindow.popupGameEndMessage()
  게임의 엔딩 알림을 보여줍니다.

SwordManager.current_sword_index : Number
  현재 검이 몇강인지 담긴 변수입니다.
SwordManager.getCurrentSword() : Sword
  현재 가지고 있는 검을 반환합니다.
SwordManager.upgradeSword(index: Number)
  SwordManager.upgradeSword() | 검을 +1강 합니다.
  SwordManager.upgradeSword(index) | 검을 +index강 합니다.
SwordManager.downgradeSword()
  검을 -1강 합니다.
SwordManager.appendSword(sword: Sword)
  sword를 검 리스트에 추가합니다.

InventoryManager.savePiece(name: String, count: Number)
  name인 조각을 count만큼 보관함에 저장합니다.
InventoryManager.saveSword(name: String, count: Number)
  name인 검을 count만큼 보관함에 저장합니다.
InventoryManager.canUseRepairPaper(count: Number) : Boolean
  현재 가진 복구권이 count보다 크거나 같으면 true, 작으면 false 반환합니다.
InventoryManager.subtractRepairPaper() : Boolean
  복구권을 count만큼 차감 후 true 반환하고, 사용 불가시(갯수 부족) false 반환합니다.

MakingManager.setRepairPaperRecipe(...materials: ...Item)
  복구권 조합법을 materials로 정합니다
MakingManager.setRecipe(resultItem: String, ...materials: ...Item)
  이름이 resultItem인 검으로 이동하는 워프권의 조합법을 materials로 정합니다.

StatManager.stat_point : Number
  현재 사용 가능한 스탯 갯수가 담긴 변수입니다.
StatManager.upgradeStat(stat: Stat)
  stat_point를 1 차감하고 stat의 레벨을 1만큼 올립니다.
StatManager.calculateLuckyBraclet(initialProb: Number)
  initialProb에 [ 행운 팔찌 ]의 현재 스탯만큼을 더하여 반환합니다.
StatManager.calculateSmith(initialCost: Number)
  initialCost을 [ 대장장이 ]의 현재 스탯만큼 감소시켜 반환합니다.
StatManager.calculateBigMerchant(initialPrice: Number)
  initialPrice를 [ 대상인 ]의 현재 스탯만큼 증가시켜 반환합니다.